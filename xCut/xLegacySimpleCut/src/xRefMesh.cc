/* 
   This file is a part of eXlibris C++ Library
   under the GNU Lesser General Public License.
   See the NOTICE.md & LICENSE.md files for terms 
   and conditions.
*/

#include <iostream>
#include <sstream>
#include "xRefMesh.h"

namespace xcut
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// xRefMesh class implementation //////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  /////////////////////////////////////// Constructor ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// End constructor ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// Destructor /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// End Destructor /////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// Private methode ////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// End Private methode ////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// Public methode /////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void xRefMesh::addPoint(idx_t i, xPoint & p)
  {
    points[i]=p;
  }
  void xRefMesh::addElem(idx_t i, elemdef_t & conect)
  {
    elems[i]=conect;
  }
#ifdef XREFMESH_WITH_SUB
  void xRefMesh::addEdge(idx_t i, elemdef_t & conect)
  {
    edges[i]=conect;
  }
  void xRefMesh::addFace(idx_t i, elemdef_t & conect)
  {
    faces[i]=conect;
  }
#endif

  // TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO
  // durty here : get use a find without checking against "end iterator". Should be added some how ; assert ? or test :-( it cost !
  xPoint & xRefMesh::getPoint(idx_t i)
  {
    return((points.find(i))->second);
  }
  xRefMesh::elemdef_t & xRefMesh::getElem(idx_t i)
  {
    return((elems.find(i))->second);
  }
  // TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO

  xRefMesh::elem_it xRefMesh::elemBegin()
  {
    return(elems.begin()); 
  }
  xRefMesh::elem_it xRefMesh::elemEnd()
  {
    return(elems.end()); 
  }
#ifdef XREFMESH_WITH_SUB
  xRefMesh::elem_it xRefMesh::faceBegin()
  {
    return(faces.begin()); 
  }
  xRefMesh::elem_it xRefMesh::faceEnd()
  {
    return(faces.end()); 
  }
  xRefMesh::elem_it xRefMesh::edgeBegin()
  {
    return(edges.begin()); 
  }
  xRefMesh::elem_it xRefMesh::edgeEnd()
  {
    return(edges.end()); 
  }
#endif
  xRefMesh::point_it xRefMesh::pointBegin()
  {
    return(points.begin()); 
  }
  xRefMesh::point_it xRefMesh::pointEnd()
  {
    return(points.end()); 
  }
  // TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO
  // durty here :  use a find without checking against end iterator. Should be added some how ; assert ? or test :-( it cost !
  xRefMesh::elem_it xRefMesh::elemLim()
  {
    return(elems.find(limite)); 
  }
#ifdef XREFMESH_WITH_SUB
  xRefMesh::elem_it xRefMesh::faceLim()
  {
    return(faces.find(face_limite)); 
  }
  xRefMesh::elem_it xRefMesh::faceIsozero()
  {
    return(faces.find(iso_zero_face)); 
  }
  xRefMesh::elem_it xRefMesh::edgeLim()
  {
    return(edges.find(edge_limite)); 
  }
#endif
  xRefMesh::elem_it xRefMesh::elemIsozero()
  {
    return(elems.find(iso_zero)); 
  }
  // TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO --- TODO
  /////////////////////////////////////// End Public methode /////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// End xRefMesh class implementation //////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// xRefMeshException class implementation /////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// general exception used for all Xsurf throw
  xRefMeshException::xRefMeshException(std::string info,std::string file,int Line,std::string date,std::string time){
    std::ostringstream oss;
    oss << "In file "<< file << " line " << Line << " compiled "<<date<<" at "<<time<<std::endl;
    oss << "xRefMeshException : "<< info << std::endl;
    msg = oss.str();
  }
  /// general exception object : destructor
  xRefMeshException :: ~xRefMeshException() throw() = default;

  /// mandatory what method
  const char * xRefMeshException::what() const throw()
  {
    return this->msg.c_str();
  }
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////// End xRefMeshException class implementation /////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



} // end of namespace
